// Step1: create a global closure function
(function() {
  // Step2: variables
  var user_id='dongxin2'
  var user_fullname='dongxin zhu'
  var lng = -122.08;
  var lat = 37.38;

// Step3: main fucntion (entrance)
init();

// Step4: define init fucntion
function init() {
  // Register event listeners
	$('nearby-btn').addEventListener('click', loadNearbyItems);
//		$('fav-btn').addEventListener('click', loadFavoriteItems);
//		$('recommend-btn').addEventListener('click', loadRecommendedItems);

  var welcomeMsg = $('welcome-msg');
  welcomeMsg.innerHTML = 'Welcome, ' + user_fullname;

  // step 7
  initGeoLocation();
}

// Step5: create $ function
// A helper function that creates a DOM element <tag options...>
function $(tag, options) {
  if(!options) {
    return document.getElementById(tag);
  }
  var element = document.createElement(tag);

  for (var option in options) {
    if (options.hasOnwProperty(option)) {
      element[option] = options[option];
    }
  }
  return element;
}

// Step6: create AJAX helper function
/**
 * @param method - GET|POST|PUT|DELETE
 * @param url - API end point
 * @param callback - This the successful callback
 * @param errorHandler - This is the failed callback
 */
function ajax(method, url, data, callback, errorHandler) {
  var xhr = new XMLHttpRequest();

  xhr.open(method, url, true);

  xhr.onload=function() {
    if (xhr.status == 200) {
      callback(xhr.responseText);
    } else if (xhr.status === 403) {
      onSessionInvalid();
    } else {
      errorHandler();
    }
  };

  xhr.onerror = function() {
    console.error("The request couldn't be completed");
    errorHandler();
  };

  if (data === null) {
    xhr.send();
  } else {
    xhr.setRequestHeader("Content-Type", "application/json;charset=utf-8");
    xhr.send(data);
  }
}

// Step7: initGeoLocation function
function initGeoLocation() {
  if (navigator.geolocation) {
    // step8
    navigator.geolocation.getCurrentPosition(onPositionUpdated,
      onLoadPositionFailed, {maximumAge:60000});
    showLoadingMessage('Retrieving your location...');
  } else {
    // step9
    onLoadPositionFailed();
  }
}

// Step8: onPositionUpdated fucntion
function onPositionUpdated(position) {
  lat = position.coords.latitude;
  lng = position.coords.longitude;

  // step11
  loadNearbyItems();
}

// Step9: onPositionUpdatedFailed function
function onLoadPositionFailed() {
  console.warn('navigator.geolocation is not available');

  //step 10
  getLocationFromIP();
}


// Step10: getLocationFromIP function
function getLocationFromIP() {
  // Get location from http://ipinfo.io/json
  var url = 'http://ipinfo.io/json';
  var req = null;
  ajax('GET', url, req, function(res) {
    var result = JSON.parse(res);
    if('loc' in result) {
      var loc = result.loc.split(',');
      lat = loc[0];
      lng = loc[1];
    }else {
      console.warn('Getting location by IP failed.');
    }
    // step11
    loadNearbyItems();
  });
}

// Step11: loadNeabyItems function
/**
 * API #1 Load the nearby items API end point: [GET]
 * /Dashi/search?user_id=1111&lat=37.38&lon=-122.08
 */
 function loadNearbyItems() {
   console.log('loadNearbyItems');
   // step12
   activeBtn('nearby-btn');

   // The request parameters
   var url = './search';
   var params = 'user_id'+user_id+'&lat='+lat+'&lon'+lng;
   var req = JSON.stringify({});

   // step13
   // display loading Message
   showLoadingMessage('Loading nearby items...');

   // make AJAX call
   ajax('GET', url+'?'+params, req, function(res) {
     var items = JSON.parse(res);
     if(!items || items.length === 0) {
       // step14
       showWarningMessage('No nearby item.');
     } else {
       // step16
       listItems(items);
     }
   },
   //faled call back
   function() {
     // step15
     shwoErrorMessage('Cannot load nearby items.');
   });
 }

 // Step12: activeBtn function
 /**
 * A helper function that makes a navigation button active
 *
 * @param btnId - The id of the navigation button
 */
function activeBtn(btnId) {
  var btns = document.getElementByClassName('main-nav-btn');

  // deactive all navigation buttons
  for (var i = 0; i < btns.length; i++) {
    btns[i].className = btns[i].className.replace(/\bavtive\b/,'');
  }

  // active the one that has id = btnId
  var btn = $(btnId);
  btn.className += ' active';
}

// Step13: showLoading Message function
function showLoadingMessage(msg) {
  var itemList = $('item-list');
  itemList.innerHTML =  '<p class="notice"><i class="fa fa-spinner fa-spin"></i> '
				+ msg + '</p>';
}

/** step 14: showWarningMessage function **/
function showWarningMessage(msg) {
	var itemList = $('item-list');
	itemList.innerHTML = '<p class="notice"><i class="fa fa-exclamation-triangle"></i> '
			+ msg + '</p>';
}

/** step15: showErrorMessage function **/
function showErrorMessage(msg) {
	var itemList = $('item-list');
	itemList.innerHTML = '<p class="notice"><i class="fa fa-exclamation-circle"></i> '
			+ msg + '</p>';
}

/** step16: listItems function **/
/**
* @param items - An array of item JSON objects
*/
function listItems(items) {
  // Clear the current results
  var itemList = $('item-list');
  itemList.innerHTML = '';

  for (var i = 0; i < items.length; i++) {
    // step17
    addItem(itemList, items[i]);
  }
}

/** step17: addItem function **/
/**
* Add item to the list
* @param itemList - The <ul id="item-list"> tag
* @param item - The item data (JSON object)
*/
function adddItem(itemList, item) {
  var item_id = item.item_id;

  // create the <li> tag and specify the id and class attributes
  var li = $('li', {
    id: 'item-' + item_id, className : 'item'
  });

  // set the data attribute
  li.dataset.item_id = item_id;
  li.dataset.favorite = item.favorite;

  // item image
  if(item.image_url) {
    li.appendChild($('img', {
      src : item.image_url
    }));
  } else {
    li.appendChild($('img', {
      src : 'https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png'
    }));
  }

  // section
  var section = $('div', {});

  // title
  var title = $('a', {
    href : item.url,
    target : '_blank',
    className : 'item-name'
  });
  title.innerHTML = item.name;
  section.appendChild(title);

  // category
  var category = $('p', {
    className : 'item-category'
  });
  category.innerHTML = 'Category: ' + item.categories.join(',');
  section.appendChild(category);

  var stars = $('div', {
    className : 'stars'
  });

  for (var i = 0; i < item.rating; i++) {
    var star = $('i', {
      className : 'fa fa-star'
    });
    stars.appendChild(star);
  }

  if(('' + item.rating).match(/\.5$/)) {
    stars.appendChild($('i', {
      className : 'fa fa-star-half-o'
    }));
  }
  section.appendChild(stars);

  li.appendChild(section);

  // address
  var address = $('p', {
    className : 'item-address'
  });
  address.innerHTML = item.address.replace(/,/g,'<br/>').replace(/\"/g,'');
  li.appendChild(address);

  // favorite link
  var favLink = $('p', {
    className : 'fav-link'
  });

  favLink.onclick = function() {
    changeFavoriteItem(item_id);
  };

  favLink.appendChild($('i', {
    id : 'fav-icon-' + item_id,
    className : item.favorite ? 'fa fa-heart' : 'fa fa-heart-o'
  }));
  li.appendChild(favLink);

  itemList.appendChild(li);
}


})()
